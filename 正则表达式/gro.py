# 除了简单地判断是否匹配之外，
# 正则表达式还有提取子串的强大功能。
# 用()表示的就是要提取的分组（Group）
# ^(\d{3})-(\d{3,8})$分别定义了两个组，
# 可以直接从匹配的字符串中提取出区号和本地号码
import re 
r = r'^(\d{3})-(\d{3,8})$'
s = '010-123678'
print(re.match(r,s))
print(re.match(r,s).span())#(0,10)
print(re.match(r,s).group())#010-12345678
print(re.match(r,s).group(0))#010-12345678
print(re.match(r,s).group(1))#010
print(re.match(r,s).group(2))#12345678
'''
如果正则表达式中定义了组，
就可以在Match对象上用group()方法提取出子串来。

注意到group(0)永远是原始字符串，
group(1)、group(2)……表示第1、2、……个子串
'''
t = '19:05:30'
r = r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$'
m = re.match(r,t)
print(m)
print(m.group())
print(m.group(1))
print(m.group(2))
print(m.group(3))
print(m.groups())

# 贪婪匹配
# 最后需要特别指出的是，
# 正则匹配默认是贪婪匹配，
# 也就是匹配尽可能多的字符。
# 举例如下，匹配出数字后面的
print(re.match(r'^(\d+?)(0*)$', '102300').groups())
print(re.match(r'^(\d+?)(0*)$', '102300'))
'''
由于\d+采用贪婪匹配，
直接把后面的0全部匹配了，
结果0*只能匹配空字符串了。

必须让\d+采用非贪婪匹配（
也就是尽可能少匹配），
才能把后面的0匹配出来，
加个?就可以让\d+采用非贪婪匹配
'''
print(re.search(r'^(\d+)(0.)$', '102300').groups())#('1023', '00')
'''
编译
当我们在Python中使用正则表达式时，
re模块内部会干两件事情：

编译正则表达式，
如果正则表达式的字符串本身不合法，会报错；

用编译后的正则表达式去匹配字符串。

如果一个正则表达式要重复使用几千次，
出于效率的考虑，我们可以预编译该正则表达式，
接下来重复使用时就不需要编译这个步骤了，直接匹配
'''
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
print(re_telephone.match('010-12345').groups())
print(re_telephone.match('010-8086').groups())